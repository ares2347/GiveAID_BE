// <auto-generated />
using System;
using GAID.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GAID.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230911151127_UpdateUser")]
    partial class UpdateUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GAID.Domain.Models.Attachment.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("GAID.Domain.Models.Donation.Donation", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaypalOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("GAID.Domain.Models.Email.EmailTemplate", b =>
                {
                    b.Property<Guid>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailTemplateType")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Body = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n        font-family: Poppins, sans-serif;\r\n        color: #8b8b8b;\r\n        background-color: #fff5ed;\r\n      \"\r\n    >\r\n      <div style=\"display: flex; flex-direction: row; height: 100px\">\r\n        <div style=\"background: #158f67; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #e9b929; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #fd4c42; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #396dc4; opacity: 0.5; flex: 1\"></div>\r\n        <img\r\n          src=\"https://sem33proj.blob.core.windows.net/attachments/a4370000-3a9b-000d-7d3c-08dbadbe1ad8\"\r\n          alt=\"\"\r\n          style=\"position: absolute; width: 80px; height: 80px; margin: 10px\"\r\n        />\r\n      </div>\r\n      <div style=\"padding: 1% 10%\">\r\n        <h2 style=\"color: #fd645b\">Dear [[Recipient_Name]],</h2>\r\n        <p>\r\n          I hope this message finds you well. We wanted to take a moment to\r\n          express our heartfelt gratitude for your recent donation to Give-AID.\r\n          Your generosity is making a significant impact on the lives of those\r\n          we serve, and we couldn't be more thankful for your support.\r\n        </p>\r\n        <p>\r\n          Your contribution helps us continue our mission and work towards the\r\n          positive change we envision. Whether it's providing essential\r\n          resources to underserved communities, funding vital research, or\r\n          championing a cause close to your heart, your donation plays a vital\r\n          role in our efforts.\r\n        </p>\r\n        <p>Here's your donation information:</p>\r\n        <table style=\"border: #8b8b8b 1px solid; width: 50%;\">\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Donation Reference</b></th>\r\n            <td style=\"flex: 1\">[[Donation_Id]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Enrollment Reference</b></th>\r\n            <td style=\"flex: 1\">[[Enrollment_Id]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Paypal Reference</b></th>\r\n            <td style=\"flex: 1\">[[Paypal_Order_Id]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Partner</b></th>\r\n            <td style=\"flex: 1\">[[Partner]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Program</b></th>\r\n            <td style=\"flex: 1\">[[Program]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Amount</b></th>\r\n            <td style=\"flex: 1\">[[Donation_Amount]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Reason</b></th>\r\n            <td style=\"flex: 1\">[[Donation_Reason]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Payment Gate</b></th>\r\n            <td style=\"flex: 1\">[[Payment_Method]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Time Stamp</b></th>\r\n            <td style=\"flex: 1\">[[Created_At]]</td>\r\n          </tr>\r\n        </table>\r\n        <p>\r\n          Once again, thank you for your generosity. We value your commitment to\r\n          our cause and consider you an essential part of our Give-AID family.\r\n        </p>\r\n        <p>\r\n          For more information on this program, please follow this link:\r\n          <a href=\"[[Program_Url]]\" style=\"font-style: italic\"\r\n            >[[Program_Name]]_[[Partner_Name]]</a\r\n          >\r\n        </p>\r\n        <p>\r\n          Thank you once again for choosing to be a part of Give-AID. We look\r\n          forward to working alongside you and creating a brighter future for\r\n          all.\r\n        </p>\r\n        <p>\r\n          <b><i>With deep gratitude,</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Partner_Name]]</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>Give-AID</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Home_Url]]</i></b>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n  ",
                            EmailTemplateType = 0,
                            Subject = "[Give-AID] Your Generosity is Changing Lives - Thank You for Your Donation!"
                        },
                        new
                        {
                            EmailTemplateId = new Guid("30000000-0000-0000-0000-000000000002"),
                            Body = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n        font-family: Poppins, sans-serif;\r\n        color: #8b8b8b;\r\n        background-color: #fff5ed;\r\n      \"\r\n    >\r\n      <div style=\"display: flex; flex-direction: row; height: 100px\">\r\n        <div style=\"background: #158f67; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #e9b929; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #fd4c42; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #396dc4; opacity: 0.5; flex: 1\"></div>\r\n        <img\r\n          src=\"https://sem33proj.blob.core.windows.net/attachments/a4370000-3a9b-000d-7d3c-08dbadbe1ad8\"\r\n          alt=\"\"\r\n          style=\"position: absolute; width: 80px; height: 80px; margin: 10px\"\r\n        />\r\n      </div>\r\n      <div style=\"padding: 1% 10%;\">\r\n        <h2 style=\"color: #fd645b\">Dear [[Recipient_Name]],</h2>\r\n        <p>\r\n          We hope this message finds you well. We are thrilled to express our\r\n          heartfelt gratitude for your recent enrollment in our NGO\r\n          (Non-Governmental Organization) program: <b>[[Program_Name]]</b>,\r\n          organized by <b>[[Partner_Name]]</b>. Your commitment to making a\r\n          positive impact on the world is truly inspiring, and we're excited to\r\n          have you as part of our community.\r\n        </p>\r\n        <p>\r\n          At <b>Give-AID</b>, we believe that change begins with individuals like you\r\n          who are willing to take action and work towards a better future. Your\r\n          decision to join our program demonstrates your dedication to the\r\n          causes we support, whether it's environmental conservation, social\r\n          justice, healthcare access, or any other issue close to your heart.\r\n        </p>\r\n        <p>Here's what you can expect as a member of our program:</p>\r\n        <p>\r\n          1. <b>Engaging Projects</b>: We will keep you updated on our ongoing\r\n          projects and opportunities to get involved. Your participation will\r\n          help us make a tangible difference in the lives of those in need.\r\n        </p>\r\n        <p>\r\n          2. <b>Community Support</b>: Connect with like-minded individuals who\r\n          share your passion for creating a better world. Our community is a\r\n          source of inspiration, collaboration, and encouragemen\r\n        </p>\r\n        <p>\r\n          3. <b>Impact Updates</b>: You'll receive regular updates on the impact\r\n          of your contributions, ensuring you can see the real difference you're\r\n          making.\r\n        </p>\r\n        <p>\r\n          We can't wait to see the positive influence you will bring to our NGO\r\n          program. Your involvement is a testament to your dedication to making\r\n          the world a better place, and together, we can achieve remarkable\r\n          things.\r\n        </p>\r\n        <p>\r\n          For more information on this program, please follow this link:\r\n          <a href=\"[[Program_Url]]\" style=\"font-style: italic\"\r\n            >[[Program_Name]]_[[Partner_Name]]</a\r\n          >\r\n        </p>\r\n        <p>\r\n          Thank you once again for choosing to be a part of Give-AID. We look\r\n          forward to working alongside you and creating a brighter future for\r\n          all.\r\n        </p>\r\n        <p><b><i>Warm regards,</i></b></p>\r\n        <p><b><i>[[Partner_Name]]</i></b></p>\r\n        <p><b><i>Give-AID</i></b></p>\r\n        <p><b><i>[[Home_Url]]</i></b></p>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n",
                            EmailTemplateType = 1,
                            Subject = "[Give-AID] Thank You for Enrolling in Our NGO Program!"
                        },
                        new
                        {
                            EmailTemplateId = new Guid("30000000-0000-0000-0000-000000000003"),
                            Body = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n        font-family: Poppins, sans-serif;\r\n        color: #8b8b8b;\r\n        background-color: #fff5ed;\r\n      \"\r\n    >\r\n      <div style=\"display: flex; flex-direction: row; height: 100px\">\r\n        <div style=\"background: #158f67; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #e9b929; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #fd4c42; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #396dc4; opacity: 0.5; flex: 1\"></div>\r\n        <img\r\n          src=\"https://sem33proj.blob.core.windows.net/attachments/a4370000-3a9b-000d-7d3c-08dbadbe1ad8\"\r\n          alt=\"\"\r\n          style=\"position: absolute; width: 80px; height: 80px; margin: 10px\"\r\n        />\r\n      </div>\r\n      <div style=\"padding: 1% 10%\">\r\n        <h2 style=\"color: #fd645b\">Dear [[Recipient_Name]],</h2>\r\n        <p>\r\n          We hope this message finds you in good health and high spirits. We\r\n          wanted to take a moment to share some important news regarding our\r\n          charity program [[Program_Name]] at Give-AID.\r\n        </p>\r\n        <p>\r\n          We would like to take this opportunity to express our deepest\r\n          gratitude to each and every one of you for your unwavering support,\r\n          dedication, and commitment to our cause throughout the duration of the\r\n          program. Your generosity and enthusiasm have been truly inspiring and\r\n          have made a profound impact on the lives of countless individuals and\r\n          communities.\r\n        </p>\r\n        <p>Here's the final result of the program:</p>\r\n        <table style=\"border: #8b8b8b 1px solid; width: 50%\">\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px\">\r\n            <th style=\"width: 200px; text-align: start\"><b>Partner</b></th>\r\n            <td style=\"flex: 1\">[[Partner]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px\">\r\n            <th style=\"width: 200px; text-align: start\"><b>Program</b></th>\r\n            <td style=\"flex: 1\">[[Program]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px\">\r\n            <th style=\"width: 200px; text-align: start\"><b>Total Donation</b></th>\r\n            <td style=\"flex: 1\">[[Donation_Amount]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px\">\r\n            <th style=\"width: 200px; text-align: start\"><b>Duration</b></th>\r\n            <td style=\"flex: 1\">[[Donation_Duration]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px\">\r\n            <th style=\"width: 200px; text-align: start\"><b>End Date</b></th>\r\n            <td style=\"flex: 1\">[[Donation_End_Date]]</td>\r\n          </tr>\r\n        </table>\r\n        <p>\r\n          While our charity program may be coming to a close, please know that\r\n          the work we have accomplished together will continue to ripple through\r\n          the lives of those we've touched. Your contributions have left an\r\n          indelible mark of kindness and compassion on the world. While one\r\n          chapter may be closing, we look forward to the exciting opportunities\r\n          and challenges that lie ahead as we continue our mission to make the\r\n          world a better place.\r\n        </p>\r\n        <p>\r\n          If you have any questions or would like to connect with us further,\r\n          please feel free to reach out at\r\n          <a href=\"[[Program_Url]]\" style=\"font-style: italic\"\r\n            >[[Program_Name]]_[[Partner_Name]]</a\r\n          >\r\n        </p>\r\n        <p>\r\n          Thank you once again for choosing to be a part of Give-AID. We look\r\n          forward to working alongside you and creating a brighter future for\r\n          all.\r\n        </p>\r\n        <p>\r\n          <b><i>With heartfelt thanks and warm regards,</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Partner_Name]]</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>Give-AID</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Home_Url]]</i></b>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n",
                            EmailTemplateType = 2,
                            Subject = "[Give-AID] Important Update: Closure of Our Charity Program"
                        },
                        new
                        {
                            EmailTemplateId = new Guid("30000000-0000-0000-0000-000000000004"),
                            Body = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n        font-family: Poppins, sans-serif;\r\n        color: #8b8b8b;\r\n        background-color: #fff5ed;\r\n      \"\r\n    >\r\n      <div style=\"display: flex; flex-direction: row; height: 100px\">\r\n        <div style=\"background: #158f67; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #e9b929; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #fd4c42; opacity: 0.5; flex: 1\"></div>\r\n        <div style=\"background: #396dc4; opacity: 0.5; flex: 1\"></div>\r\n        <img\r\n          src=\"https://sem33proj.blob.core.windows.net/attachments/a4370000-3a9b-000d-7d3c-08dbadbe1ad8\"\r\n          alt=\"\"\r\n          style=\"position: absolute; width: 80px; height: 80px; margin: 10px\"\r\n        />\r\n      </div>\r\n      <div style=\"padding: 1% 10%\">\r\n        <h2 style=\"color: #fd645b\">Dear [[Recipient_Name]],</h2>\r\n        <p>\r\n          I hope this message finds you well. We are excited to extend an\r\n          invitation to you for an upcoming event that promises to be both\r\n          inspiring and impactful. Give-AID is hosting a special program, and we\r\n          believe your participation would greatly enrich our efforts.\r\n        </p>\r\n        <p>Here's our program information:</p>\r\n        <table style=\"border: #8b8b8b 1px solid; width: 50%;\">\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\">\r\n              <b>Program Name</b>\r\n            </th>\r\n            <td style=\"flex: 1\">[[Program_Name]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\">\r\n              <b>Partner</b>\r\n            </th>\r\n            <td style=\"flex: 1\">[[Partner_Name]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\">\r\n              <b>Start Date</b>\r\n            </th>\r\n            <td style=\"flex: 1\">[[Start_Date]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>End Date</b></th>\r\n            <td style=\"flex: 1\">[[End_Date]]</td>\r\n          </tr>\r\n          <tr style=\"display: flex; gap: 10px; padding: 8px;\">\r\n            <th style=\"width: 200px; text-align: start;\"><b>Target</b></th>\r\n            <td style=\"flex: 1\">[[Target]]</td>\r\n          </tr>\r\n        </table>\r\n        <p>\r\n          We are committed to creating a positive impact, and your presence at\r\n          our program would mean a great deal to us. Together, we can make a\r\n          difference in our community and beyond.\r\n        </p>\r\n        <p>\r\n          Should you have any questions or require further information, please do not hesitate to reach out to us at, please follow this link:\r\n          <a href=\"[[Program_Url]]\" style=\"font-style: italic\"\r\n            >[[Program_Name]]_[[Partner_Name]]</a\r\n          >\r\n        </p>\r\n        <p>\r\n          Thank you once again for choosing to be a part of Give-AID. We look\r\n          forward to working alongside you and creating a brighter future for\r\n          all.\r\n        </p>\r\n        <p>\r\n          <b><i>With deep gratitude,</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Partner_Name]]</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>Give-AID</i></b>\r\n        </p>\r\n        <p>\r\n          <b><i>[[Home_Url]]</i></b>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n",
                            EmailTemplateType = 3,
                            Subject = "[Give-AID] Join Us in Making a Difference: Invitation to Our NGO Program"
                        });
                });

            modelBuilder.Entity("GAID.Domain.Models.Enrollment.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProgramId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("GAID.Domain.Models.Page.Page", b =>
                {
                    b.Property<Guid>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageType")
                        .HasColumnType("int");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PartnerId")
                        .IsUnique()
                        .HasFilter("[PartnerId] IS NOT NULL");

                    b.HasIndex("ProgramId")
                        .IsUnique()
                        .HasFilter("[ProgramId] IS NOT NULL");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("GAID.Domain.Models.Partner.Partner", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerThumbnailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartnerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PartnerThumbnailId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("GAID.Domain.Models.Program.Program", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosedReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramThumbnailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Target")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProgramId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProgramThumbnailId")
                        .IsUnique();

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("GAID.Domain.Models.Subscription.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PartnerId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("GAID.Domain.Models.User.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Name = "Partner",
                            NormalizedName = "Partner"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("GAID.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a9943f8-af5b-4231-9a8d-63f8c43c6e0c",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 11, 15, 11, 27, 486, DateTimeKind.Unspecified).AddTicks(1237), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FullName = "System Admin",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@email.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEMeRmOWs9W/KsBTc0NEYwk5Efsp1rjs48fPIPWSW0xhuuKWByjTRlnJXKrEmn9yPhA==",
                            PaymentInformation = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3YYPM246ONSVZFAKY3TR2JSVKMX7ZM4D",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("20000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GAID.Domain.Models.Attachment.Attachment", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GAID.Domain.Models.Donation.Donation", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.Enrollment.Enrollment", "Enrollment")
                        .WithMany("Donations")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Enrollment");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GAID.Domain.Models.Enrollment.Enrollment", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GAID.Domain.Models.Program.Program", "Program")
                        .WithMany("Enrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("GAID.Domain.Models.Page.Page", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GAID.Domain.Models.Partner.Partner", null)
                        .WithOne("Page")
                        .HasForeignKey("GAID.Domain.Models.Page.Page", "PartnerId");

                    b.HasOne("GAID.Domain.Models.Program.Program", null)
                        .WithOne("Page")
                        .HasForeignKey("GAID.Domain.Models.Page.Page", "ProgramId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GAID.Domain.Models.Partner.Partner", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GAID.Domain.Models.Attachment.Attachment", "PartnerThumbnail")
                        .WithOne()
                        .HasForeignKey("GAID.Domain.Models.Partner.Partner", "PartnerThumbnailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PartnerThumbnail");
                });

            modelBuilder.Entity("GAID.Domain.Models.Program.Program", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GAID.Domain.Models.Partner.Partner", "Partner")
                        .WithMany("Programs")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GAID.Domain.Models.Attachment.Attachment", "ProgramThumbnail")
                        .WithOne()
                        .HasForeignKey("GAID.Domain.Models.Program.Program", "ProgramThumbnailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Partner");

                    b.Navigation("ProgramThumbnail");
                });

            modelBuilder.Entity("GAID.Domain.Models.Subscription.Subscription", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GAID.Domain.Models.User.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GAID.Domain.Models.Partner.Partner", "Partner")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GAID.Domain.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GAID.Domain.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GAID.Domain.Models.Enrollment.Enrollment", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("GAID.Domain.Models.Partner.Partner", b =>
                {
                    b.Navigation("Page")
                        .IsRequired();

                    b.Navigation("Programs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("GAID.Domain.Models.Program.Program", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Page")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
